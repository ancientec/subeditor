
//example server script: /example/nodejs: node server.js 8000
var url = "http://localhost:8000";
var urlTest = null;
var pngA = '';

var pngB = 'iVBORw0KGgoAAAANSUhEUgAAAJAAAACtCAYAAABfovbLAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAaGVYSWZNTQAqAAAACAAEAQYAAwAAAAEAAgAAARIAAwAAAAEAAQAAASgAAwAAAAEAAgAAh2kABAAAAAEAAAA+AAAAAAADoAEAAwAAAAEAAQAAoAIABAAAAAEAAACQoAMABAAAAAEAAACtAAAAAORx84QAAALkaVRYdFhNTDpjb20uYWRvYmUueG1wAAAAAAA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJYTVAgQ29yZSA2LjAuMCI+CiAgIDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+CiAgICAgIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiCiAgICAgICAgICAgIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIgogICAgICAgICAgICB4bWxuczpleGlmPSJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWYvMS4wLyI+CiAgICAgICAgIDx0aWZmOkNvbXByZXNzaW9uPjE8L3RpZmY6Q29tcHJlc3Npb24+CiAgICAgICAgIDx0aWZmOlJlc29sdXRpb25Vbml0PjI8L3RpZmY6UmVzb2x1dGlvblVuaXQ+CiAgICAgICAgIDx0aWZmOk9yaWVudGF0aW9uPjE8L3RpZmY6T3JpZW50YXRpb24+CiAgICAgICAgIDx0aWZmOlBob3RvbWV0cmljSW50ZXJwcmV0YXRpb24+MjwvdGlmZjpQaG90b21ldHJpY0ludGVycHJldGF0aW9uPgogICAgICAgICA8ZXhpZjpQaXhlbFhEaW1lbnNpb24+MTQ0PC9leGlmOlBpeGVsWERpbWVuc2lvbj4KICAgICAgICAgPGV4aWY6Q29sb3JTcGFjZT4xPC9leGlmOkNvbG9yU3BhY2U+CiAgICAgICAgIDxleGlmOlBpeGVsWURpbWVuc2lvbj4xNzM8L2V4aWY6UGl4ZWxZRGltZW5z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';

var pngC = '';

var pngD = 'iVBORw0KGgoAAAANSUhEUgAAAJoAAAC3CAYAAADqzUf/AAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAaGVYSWZNTQAqAAAACAAEAQYAAwAAAAEAAgAAARIAAwAAAAEAAQAAASgAAwAAAAEAAgAAh2kABAAAAAEAAAA+AAAAAAADoAEAAwAAAAEAAQAAoAIABAAAAAEAAACaoAMABAAAAAEAAAC3AAAAAPwNo/4AAALkaVRYdFhNTDpjb20uYWRvYmUueG1wAAAAAAA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJYTVAgQ29yZSA2LjAuMCI+CiAgIDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+CiAgICAgIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiCiAgICAgICAgICAgIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIgogICAgICAgICAgICB4bWxuczpleGlmPSJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWYvMS4wLyI+CiAgICAgICAgIDx0aWZmOkNvbXByZXNzaW9uPjE8L3RpZmY6Q29tcHJlc3Npb24+CiAgICAgICAgIDx0aWZmOlJlc29sdXRpb25Vbml0PjI8L3RpZmY6UmVzb2x1dGlvblVuaXQ+CiAgICAgICAgIDx0aWZmOk9yaWVudGF0aW9uPjE8L3RpZmY6T3JpZW50YXRpb24+CiAgICAgICAgIDx0aWZmOlBob3RvbWV0cmljSW50ZXJwcmV0YXRpb24+MjwvdGlmZjpQaG90b21ldHJpY0ludGVycHJldGF0aW9uPgogICAgICAgICA8ZXhpZjpQaXhlbFhEaW1lbnNpb24+MTU0PC9leGlmOlBpeGVsWERpbWVuc2lvbj4KICAgICAgICAgPGV4aWY6Q29sb3JTcGFjZT4xPC9leGlmOkNvbG9yU3BhY2U+CiAgICAgICAgIDxleGlmOlBpeGVsWURpbWVuc2lvbj4xODM8L2V4aWY6UGl4ZWxZRGltZW5z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';

function dataURItoBlob(dataURI) {
    var binary = atob(dataURI);
    var array = [];
    for(var i = 0; i < binary.length; i++) {
        array.push(binary.charCodeAt(i));
    }
    return new Blob([new Uint8Array(array)], {type: 'image/png'});
}

async function testURL() {
    try{
        urlTest = await fetch(url);
        urlTest.text().then(function (text) {
            if(text === "ready for test") {
                allowImageTests();
            }
          });
    }catch(e){
    }
}
testURL();

describe('image link', () => {
    it('should allow image link when feature is empty', () => {
        editor2.setCfg("image.features", []);
        //should allow image link
        var btn = editor2.refToolbar.querySelector('button[aria-controls="dropdown-menu-image"]');
        btn.click();
        chai.expect(editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content label").innerHTML).equal(editor2.ln("image url"));
        editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content .close-dropdown").click();
    });
    it('should allow only image link', () => {
        editor2.setCfg("image.features", ["url"]);
        //should allow image link
        var btn = editor2.refToolbar.querySelector('button[aria-controls="dropdown-menu-image"]');
        btn.click();
        chai.expect(editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content label").innerHTML).equal(editor2.ln("image url"));
        editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content .close-dropdown").click();
    });
    it('insert image link', () => {
        editor2.refContent.innerHTML = "";
        editor2.setCfg("image.features", ["url"]);
        //should allow image link
        var btn = editor2.refToolbar.querySelector('button[aria-controls="dropdown-menu-image"]');
        btn.click();
        editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content input").value = "https://picsum.photos/id/0/5616/3744";
        editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content button.insert").click();
        chai.expect(editor2.value()).equal('<img data-action="url" src="https://picsum.photos/id/0/5616/3744" style="max-width:100%"><br>');
    });
    it('insert image link outside code', () => {
        editor2.refContent.innerHTML = "<pre><code>abc</code></pre>";
        editor2.selection = null;
        var sel = document.getSelection();
        sel.removeAllRanges();
        var range = document.createRange();
        range.setStart(editor2.refContent.querySelector("code").firstChild, 0);
        range.setEnd(editor2.refContent.querySelector("code").firstChild, 0);
        sel.addRange(range);
        editor2.setCfg("image.features", ["url"]);
        //should allow image link
        var btn = editor2.refToolbar.querySelector('button[aria-controls="dropdown-menu-image"]');
        btn.click();
        editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content input").value = "https://picsum.photos/id/0/5616/3744";
        editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content button.insert").click();
        chai.expect(editor2.value()).equal('<pre><code>abc</code></pre><img data-action="url" src="https://picsum.photos/id/0/5616/3744" style="max-width:100%"><br>');
    });
    it('should have upload feature icon', () => {
        editor2.setCfg("image.features", ["url","upload"]);
        editor2.setCfg("image.upload.url", () => {});
        //should allow image link
        var btn = editor2.refToolbar.querySelector('button[aria-controls="dropdown-menu-image"]');
        btn.click();
        chai.expect(editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content span[data-command='upload']")).not.equal(null);

        editor2.toolbar.hideDropdown();
    });
    it('should have library feature icon', () => {
        editor2.setCfg("image.features", ["url","library"]);
        editor2.setCfg("image.library.fetch", () => {});
        //should allow image link
        var btn = editor2.refToolbar.querySelector('button[aria-controls="dropdown-menu-image"]');
        btn.click();
        chai.expect(editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content span[data-command='library']")).not.equal(null);

        editor2.toolbar.hideDropdown();
    });

    
});

function allowImageTests() {
    describe('image', function() {
        this.timeout(4000);
        it('should upload and insert', (done) => {
            editor2.refContent.innerHTML = "";
            editor2.setCfg("image.features", ["url", "upload"]);
            editor2.setCfg("image.upload.url", url);
            editor2.setCfg("image.accept.types", "text/plain, image/jpeg, image/jpg, image/png, image/apng, image/gif, image/webp");
            editor2.setCfg("image.upload.handler", (file, responseText, callback) => {
                var o = JSON.parse(responseText);
                callback(o.URL, o.Thumb, o);
            });

            var btn = editor2.refToolbar.querySelector('button[aria-controls="dropdown-menu-image"]');
            btn.click();
            editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content span[data-command='upload']").click();
            //should allow image link
            var file = new File(["foo"], "foo.txt", {
                type: "text/plain",
            }), file_a = new File([dataURItoBlob(pngA)], "a.png", {
                type: "image/png",
            });
            var input = editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content .uploadcontainer input");
            input._mockfiles = [file,file_a];
            input.dispatchEvent(new Event('change'));

            editor2.cachedList["image.upload.insert.list"] = [];

            var completed = () => {
                
                editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content .FileTileImageGridFooter .insert").click();
                chai.expect(editor2.value()).equal('<a data-action="upload" href="'+editor2.cachedList["image.upload.insert.list"][0].url+'" target="_blank">foo.txt</a><br><img data-action="upload" src="'+editor2.cachedList["image.upload.insert.list"][1].url+'" style="max-width:100%"><br>');
                //console.log("image.upload.total.size", editor2.getCallback("image.upload.total.size"));
                done();
            }

            var x = setInterval(() => {
                if(editor2.refToolbar.querySelectorAll(".FileTileImageGrid button.completed").length === 2 && editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content .FileTileImageGridFooter .insert").innerHTML === editor2.ln("insert")) {
                    clearInterval(x);
                    completed();
                }
            }, 200);
            
        });
        it('should reject file type', (done) => {
        editor2.refContent.innerHTML = "";
                editor2.setCfg("image.features", ["url", "upload"]);
                editor2.setCfg("image.upload.url", url);
                editor2.setCfg("image.accept.types", "image/jpeg, image/jpg, image/png, image/apng, image/gif, image/webp");
                editor2.setCfg("image.upload.handler", (file, responseText, callback) => {
                    var o = JSON.parse(responseText);
                    callback(o.URL, o.Thumb, o);
                });
    
                var btn = editor2.refToolbar.querySelector('button[aria-controls="dropdown-menu-image"]');
                btn.click();
                editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content span[data-command='upload']").click();
                //should allow image link
                var file = new File(["foo"], "foo.txt", {
                    type: "text/plain",
                });
                var input = editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content .uploadcontainer input");
                input._mockfiles = [file];
                input.dispatchEvent(new Event('change'));
                chai.expect(editor2.refToolbar.querySelector('#dropdown-menu-image .se-dropdown-content .uploadcontainer strong').innerHTML).equal("<small>"+editor2.ln("please select the appropriate file types:")+" image/jpeg, image/jpg, image/png, image/apng, image/gif, image/webp</small>");
                done();
            
        });
        it('should limit upload file numbers', (done) => {
        editor2.refContent.innerHTML = "";
        editor2.setCfg("image.features", ["url", "upload"]);
        editor2.setCfg("image.upload.url", url);
        editor2.setCfg("image.upload.accept.files", 1);//accept only 1 file
        editor2.setCfg("image.accept.types", "text/plain, image/jpeg, image/jpg, image/png, image/apng, image/gif, image/webp");
        editor2.setCfg("image.upload.handler", (file, responseText, callback) => {
            var o = JSON.parse(responseText);
            callback(o.URL, o.Thumb, o);
        });

        var btn = editor2.refToolbar.querySelector('button[aria-controls="dropdown-menu-image"]');
        btn.click();
        editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content span[data-command='upload']").click();
        //should allow image link
        var file = new File(["foo"], "foox.txt", {
            type: "text/plain",
        }), file2 = new File(["foo2"], "foo2.txt", {
            type: "text/plain",
        });
        var input = editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content .uploadcontainer input");
        input._mockfiles = [file, file2];
        input.dispatchEvent(new Event('change'));
        editor2.cachedList["image.upload.insert.list"] = [];
        chai.expect(editor2.refToolbar.querySelector('#dropdown-menu-image .se-dropdown-content .uploadcontainer strong').innerHTML).to.equal('<small>Cannot upload more than 1 files. </small>');
        done();
            
        });
        it('should show allow upload tile button', function(done) {
            editor2.refContent.innerHTML = "";
            editor2.cachedList["image.upload.insert.list"] = [];
                editor2.setCfg("image.features", ["url", "upload"]);
                editor2.setCfg("image.upload.url", url);
                editor2.setCfg("image.upload.accept.files", 3);//accept 3 file
                editor2.setCfg("image.accept.types", "text/plain, image/jpeg, image/jpg, image/png, image/apng, image/gif, image/webp");
                editor2.setCfg("image.upload.handler", (file, responseText, callback) => {
                    var o = JSON.parse(responseText);
                    callback(o.URL, o.Thumb, o);
                });
    
                var btn = editor2.refToolbar.querySelector('button[aria-controls="dropdown-menu-image"]');
                btn.click();
                editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content span[data-command='upload']").click();
                //should allow image link
                var file = new File(["foo"], "foo.txt", {type: "text/plain"});
                var input = editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content .uploadcontainer input");
                input._mockfiles = [file];
                input.dispatchEvent(new Event('change'));
                
                var completed = () => {
                    chai.expect(editor2.refToolbar.querySelector(".FileTileImageGrid button.upload")).not.equal(null);
                    editor2.refToolbar.querySelector(".FileTileImageGrid button.upload input")._mockfiles = [new File(["foo"], "foo2.txt", {type: "text/plain"})];
                    editor2.refToolbar.querySelector(".FileTileImageGrid button.upload input").dispatchEvent(new Event('change'));
                }
                var completed2 = () => {
                    chai.expect(editor2.refToolbar.querySelector(".FileTileImageGrid button.upload")).not.equal(null);
                    editor2.refToolbar.querySelector(".FileTileImageGrid button.upload input")._mockfiles = [new File(["foo"], "foo3.txt", {type: "text/plain"})];
                    editor2.refToolbar.querySelector(".FileTileImageGrid button.upload input").dispatchEvent(new Event('change'));
                }
                var completed3 = () => {
                    chai.expect(editor2.refToolbar.querySelector(".FileTileImageGrid button.upload")).equal(null);
                    done();
                    editor2.toolbar.hideDropdown();
                    
                }
                this.timeout(8000);
                var x = setInterval(() => {
                    
                    if(editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content .FileTileImageGridFooter .insert").innerHTML === editor2.ln("insert")) {
                        switch(editor2.refToolbar.querySelectorAll(".FileTileImageGrid button.completed").length) {
                            case 1:
                                try{completed();}catch(e){console.log(e);}
                            break;
                            case 2:
                                try{completed2();}catch(e){console.log(e);}
                            break;
                            case 3:
                                clearInterval(x);
                                try{setTimeout(completed3, 10);}catch(e){console.log(e);}
                            
                            break;
                            default:
                            break;
                        }
                    }
                    
                }, 200);
        });
        it('should allow drop files', (done) => {
            editor2.refContent.innerHTML = "";
            editor2.cachedList["image.upload.insert.list"] = [];
            editor2.setCfg("image.features", ["url", "upload"]);
            editor2.setCfg("image.upload.url", url);
            editor2.setCfg("image.upload.accept.files", 0);
            editor2.setCfg("image.accept.types", "text/plain, image/jpeg, image/jpg, image/png, image/apng, image/gif, image/webp");
            editor2.setCfg("image.upload.handler", (file, responseText, callback) => {
                var o = JSON.parse(responseText);
                callback(o.URL, o.Thumb, o);
            });
    
            var btn = editor2.refToolbar.querySelector('button[aria-controls="dropdown-menu-image"]');
            btn.click();
            editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content span[data-command='upload']").click();
            //should allow image link
            var file = new File(["foo"], "foox.txt", {
                type: "text/plain",
            }), file2 = new File([dataURItoBlob(pngA)], "a.png", {
                type: "image/png",
            });
            var dropEL = editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content .uploadcontainer");
            var evt = new Event('drop');
            evt.dataTransfer = {files : [file,file2]};
            dropEL.dispatchEvent(evt);
    
            var completed = () => {
                
                editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content .FileTileImageGridFooter .insert").click();
                chai.expect(editor2.value()).equal('<a data-action="upload" href="'+editor2.cachedList["image.upload.insert.list"][0].url+'" target="_blank">foox.txt</a><br><img data-action="upload" src="'+editor2.cachedList["image.upload.insert.list"][1].url+'" style="max-width:100%"><br>');
                done();
            }
    
            var x = setInterval(() => {
                if(editor2.refToolbar.querySelectorAll(".FileTileImageGrid button.completed").length === 2 && editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content .FileTileImageGridFooter .insert").innerHTML === editor2.ln("insert")) {
                    clearInterval(x);
                    completed();
                }
            }, 200);
                
        });
        it('should use custom el function', (done) => {
                editor2.refContent.innerHTML = "";
                editor2.cachedList["image.upload.insert.list"] = [];
                editor2.setCfg("image.features", ["url", "upload"]);
                editor2.setCfg("image.upload.url", url);
                editor2.setCfg("image.upload.accept.files", 0);
                editor2.setCfg("image.accept.types", "text/plain, image/jpeg, image/jpg, image/png, image/apng, image/gif, image/webp");
                editor2.setCfg("image.upload.handler", (file, responseText, callback) => {
                    var o = JSON.parse(responseText);
                    callback(o.URL, o.Thumb, o, () => {
                        if(o.Type.indexOf("image/") !== -1) {
                            const _node = document.createElement("img");
                            _node.setAttribute("data-action", "upload");
                            _node.setAttribute("src", o.URL);
                            _node.setAttribute("style","max-width:100%");
                            _node.setAttribute("data-test", "1");
                            return _node;
                        } else {
                            const _node = document.createElement("a");
                            _node.setAttribute("data-action", "upload");
                            _node.setAttribute("href", o.URL);
                            _node.setAttribute("target","_blank");
                            _node.setAttribute("data-test", "1");
                            _node.innerHTML = "foox.txt";
                            return _node;
                        }
                    });
                });
        
                var btn = editor2.refToolbar.querySelector('button[aria-controls="dropdown-menu-image"]');
                btn.click();
                editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content span[data-command='upload']").click();
                //should allow image link
                var file = new File(["foo"], "foox.txt", {
                    type: "text/plain",
                }), file2 = new File([dataURItoBlob(pngA)], "a.png", {
                    type: "image/png",
                });
                var dropEL = editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content .uploadcontainer");
                var evt = new Event('drop');
                evt.dataTransfer = {files : [file,file2]};
                dropEL.dispatchEvent(evt);
        
                var completed = () => {
                    chai.expect(editor2.value()).equal('<a data-action="upload" href="'+editor2.cachedList["image.upload.insert.list"][0].url+'" target="_blank" data-test="1">foox.txt</a><br><img data-action="upload" src="'+editor2.cachedList["image.upload.insert.list"][1].url+'" style="max-width:100%" data-test="1"><br>');
                    done();
                }
        
                var x = setInterval(() => {
                    if(editor2.refToolbar.querySelectorAll(".FileTileImageGrid button.completed").length === 2 && editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content .FileTileImageGridFooter .insert").innerHTML === editor2.ln("insert")) {
                        editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content .FileTileImageGridFooter .insert").click();
                        clearInterval(x);
                        completed();
                       
                    }
                }, 200);
                    
        });
        it('upload should rewrite handler', (done) => {
                editor2.refContent.innerHTML = "";
                editor2.cachedList["image.upload.insert.list"] = [];
                editor2.setCfg("image.features", ["url", "upload"]);
                editor2.setCfg("image.url.rewrite.handler", (u) => { return u.replace('http://','//').replace('https://','//')});
                editor2.setCfg("image.upload.url", url);
                editor2.setCfg("image.upload.accept.files", 0);
                editor2.setCfg("image.upload.handler", (file, responseText, callback) => {
                    var o = JSON.parse(responseText);
                    callback(o.URL, o.Thumb, o);
                });
                editor2.setCfg("image.accept.types", "text/plain, image/jpeg, image/jpg, image/png, image/apng, image/gif, image/webp");
        
                var btn = editor2.refToolbar.querySelector('button[aria-controls="dropdown-menu-image"]');
                btn.click();
                editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content span[data-command='upload']").click();
                //should allow image link
                var file = new File(["bar"], "bar.txt", {
                    type: "text/plain",
                }), file2 = new File([dataURItoBlob(pngB)], "b.png", {
                    type: "image/png",
                });
                var dropEL = editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content .uploadcontainer");
                var evt = new Event('drop');
                evt.dataTransfer = {files : [file,file2]};
                dropEL.dispatchEvent(evt);
                var completed = () => {
                    editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content .FileTileImageGridFooter .insert").click();
                    chai.expect(editor2.value()).equal('<a data-action="upload" href="'+editor2.cachedList["image.upload.insert.list"][0].url+'" target="_blank">bar.txt</a><br><img data-action="upload" src="'+editor2.cachedList["image.upload.insert.list"][1].url+'" style="max-width:100%"><br>');
                    chai.expect(editor2.cachedList["image.upload.insert.list"][0].url.indexOf("//")).equal(0);
                    chai.expect(editor2.cachedList["image.upload.insert.list"][1].url.indexOf("//")).equal(0);
                    done();
                }

                var x = setInterval(() => {
                    
                    if(editor2.refToolbar.querySelectorAll(".FileTileImageGrid button.completed").length === 2 && editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content .FileTileImageGridFooter .insert").innerHTML === editor2.ln("insert")) {
                        clearInterval(x);
                        try{ completed();}catch(e){console.log(e);}
                    }
                }, 200);
                
                
                    
        });
        it('upload limit size', (done) => {
            editor2.refContent.innerHTML = "";
            editor2.setCfg("image.features", ["url", "upload"]);
            editor2.setCfg("image.url.rewrite.handler", (u) => { return u.replace('http://','//').replace('https://','//')});
            editor2.setCfg("image.upload.url", url);
            editor2.setCfg("image.upload.accept.files", 0);
            editor2.setCfg("image.upload.max.size", 10 / 1048576);
            editor2.setCfg("image.upload.max.size.per.file", 5 / 1048576);
            editor2.setCfg("image.upload.handler", (file, responseText, callback) => {
                var o = JSON.parse(responseText);
                callback(o.URL, o.Thumb, o);
            });
            editor2.setCfg("image.accept.types", "text/plain, image/jpeg, image/jpg, image/png, image/apng, image/gif, image/webp");
    
            var btn = editor2.refToolbar.querySelector('button[aria-controls="dropdown-menu-image"]');
            btn.click();
            editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content span[data-command='upload']").click();
            //should allow image link
            var file = new File(["barxxxx"], "bar.txt", {
                type: "text/plain",
            }), file2 = new File(["fooxxx"], "foo.txt", {
                type: "text/plain",
            });
            var dropEL = editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content .uploadcontainer");
            var evt = new Event('drop');
            evt.dataTransfer = {files : [file,file2]};
            dropEL.dispatchEvent(evt);
            const txt = editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content .uploadcontainer strong");
            
            chai.expect(txt.innerHTML).equal('<small>max allowed size of all files in total should be  0.0000095367431640625MB. </small><small>max allowed size per file should be  0.00000476837158203125MB. </small>');

            done();
        });
        it('upload limit total size', (done) => {
            editor2.refContent.innerHTML = "";
            editor2.cachedList["image.upload.insert.list"] = [];
            editor2.setCfg("image.features", ["url", "upload"]);
            editor2.setCfg("image.url.rewrite.handler", (u) => { return u.replace('http://','//').replace('https://','//')});
            editor2.setCfg("image.upload.url", url);
            editor2.setCfg("image.upload.accept.files", 0);
            editor2.setCfg("image.upload.max.size", 8 / 1048576);
            editor2.setCfg("image.upload.max.size.per.file", 5 / 1048576);
            editor2.setCfg("image.upload.handler", (file, responseText, callback) => {
                var o = JSON.parse(responseText);
                callback(o.URL, o.Thumb, o);
            });
            editor2.setCfg("image.accept.types", "text/plain, image/jpeg, image/jpg, image/png, image/apng, image/gif, image/webp");
    
            var btn = editor2.refToolbar.querySelector('button[aria-controls="dropdown-menu-image"]');
            btn.click();
            editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content span[data-command='upload']").click();
            //should allow image link
            var file = new File(["barxx"], "bar.txt", {
                type: "text/plain",
            }), file2 = new File(["fooxx"], "foo.txt", {
                type: "text/plain",
            });
            var dropEL = editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content .uploadcontainer");
            var evt = new Event('drop');
            evt.dataTransfer = {files : [file,file2]};
            dropEL.dispatchEvent(evt);
            const txt = editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content .uploadcontainer strong");
            
            chai.expect(txt.innerHTML).equal('<small>max allowed size of all files in total should be  0.00000762939453125MB. </small>');
            editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content .se-button").click();
            done();
        });
        it('upload limit per file size', (done) => {
            editor2.refContent.innerHTML = "";
            editor2.setCfg("image.features", ["url", "upload"]);
            editor2.setCfg("image.url.rewrite.handler", (u) => { return u.replace('http://','//').replace('https://','//')});
            editor2.setCfg("image.upload.url", url);
            editor2.setCfg("image.upload.accept.files", 0);
            editor2.setCfg("image.upload.max.size", 100 / 1048576);
            editor2.setCfg("image.upload.max.size.per.file", 5 / 1048576);
            editor2.setCfg("image.upload.handler", (file, responseText, callback) => {
                var o = JSON.parse(responseText);
                callback(o.URL, o.Thumb, o);
            });
            editor2.setCfg("image.accept.types", "text/plain, image/jpeg, image/jpg, image/png, image/apng, image/gif, image/webp");
    
            var btn = editor2.refToolbar.querySelector('button[aria-controls="dropdown-menu-image"]');
            btn.click();
            editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content span[data-command='upload']").click();
            //should allow image link
            var file = new File(["barxxx"], "bar.txt", {
                type: "text/plain",
            }), file2 = new File(["fooxxx"], "foo.txt", {
                type: "text/plain",
            });
            var dropEL = editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content .uploadcontainer");
            var evt = new Event('drop');
            evt.dataTransfer = {files : [file,file2]};
            dropEL.dispatchEvent(evt);
            const txt = editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content .uploadcontainer strong");
            
            chai.expect(txt.innerHTML).equal('<small>max allowed size per file should be  0.00000476837158203125MB. </small>');

            done();
            //reset
            editor2.setCfg("image.upload.max.size", 0);
            editor2.setCfg("image.upload.max.size.per.file", 0);
        });
        it('load library', (done) => {
            editor2.refContent.innerHTML = "";
            editor2.setCfg("image.features", ["url","upload","library"]);
            editor2.setCfg("image.library.per.page", 10);
            editor2.setCfg("image.library.allow.paging", true);
            editor2.setCfg("image.library.allow.search", true);
            var library_results, tested = false;
            editor2.setCfg("image.library.fetch", (page, perpage, keyword, callback) => {
                fetch(url + "/library?page="+page+"&perpage="+perpage+"&keyword="+encodeURIComponent(keyword), {method: 'get',headers: {'Accept': 'application/json'}}).then((response) => {
                    return response.json();
                  }).then((output) => {
                    library_results = output;
                  }).catch((err) => { 
                    console.log(err);
                  }).finally(() => {
                    if(Object.keys(library_results).length) {
                        //has result for test, reformat it:
                        var data = [];
                        library_results.Data.forEach(d => {
                            data.push({name : d.author, thumb : d.download_url, url : d.download_url, type : "image/jpeg"});
                        });
                        callback(library_results.Pages.Total, data);
                        
                    }
                    if(!tested){
                        //make sure only run once
                        const content = editor2.refToolbar.querySelector(".ImageLibrary").parentElement;
                        chai.expect(content.querySelector(".current").value).equal("1");
                        chai.expect(content.querySelector(".total").innerHTML).equal("/ "+Math.ceil(library_results.Pages.Total/10).toString());
                        chai.expect(content.querySelectorAll(".ImageLibrary button").length).equal(10);
                        chai.expect(content.querySelector(".ImageLibrary button img").getAttribute("src")).equal(library_results.Data[0].download_url);
                        chai.expect(content.querySelector(".ImageLibrary button:last-child img").getAttribute("src")).equal(library_results.Data[library_results.Data.length-1].download_url);
                        done();
                        tested = true;
                    }
                  });
                
            });

            let btn = editor2.refToolbar.querySelector('button[aria-controls="dropdown-menu-image"]');
            btn.click();
            btn.parentElement.parentElement.querySelector('.se-button[data-command=library]').click();
            
        });
        it('image library without re-rendering', () => {
            //using result from previous test
            editor2.toolbar.hideDropdown();
            let btn = editor2.refToolbar.querySelector('button[aria-controls="dropdown-menu-image"]');
            const content = editor2.refToolbar.querySelector(".ImageLibrary").parentElement;
            content.querySelector(".ImageLibrary button:last-child img").setAttribute("data-test", "test");
            //should show the same library
            btn.click();
            chai.expect(content.querySelector(".ImageLibrary button:last-child img").getAttribute("data-test")).equal("test");
            
        });
        it('library - custom tile function', (done) => {
            editor2.refContent.innerHTML = "";
            editor2.setCfg("image.features", ["url","library"]);
            editor2.setCfg("image.library.per.page", 10);
            var library_results, tested = false;
            editor2.setCfg("image.library.fetch", (page, perpage, keyword, callback) => {
                fetch(url + "/library?page="+page+"&perpage="+perpage+"&keyword="+encodeURIComponent(keyword), {method: 'get',headers: {'Accept': 'application/json'}}).then((response) => {
                    return response.json();
                  }).then((output) => {
                    library_results = output;
                  }).catch((err) => { 
                    console.log(err);
                  }).finally(() => {
                    if(Object.keys(library_results).length) {
                        //has result for test, reformat it:
                        var data = [];
                        library_results.Data.forEach(d => {
                            data.push({name : d.author, thumb : d.download_url, url : d.download_url, type : "image/jpeg", 
                            tileFunc : () => {
                                const _btn = document.createElement("button");
                                _btn.setAttribute("data-id",d.id);
                                _btn.innerHTML = '<figure><figure><img src="'+(d.download_url)+'" alt="'+d.author+'"></figure></figure><span class="caption">'+d.author+'</span>';
                                return _btn;
                            }});
                        });
                        callback(library_results.Pages.Total, data);
                        
                    }
                    if(!tested){
                        //make sure only run once
                        const content = editor2.refToolbar.querySelector(".ImageLibrary").parentElement;
                        chai.expect(content.querySelector(".ImageLibrary button").getAttribute("data-id")).equal(library_results.Data[0].id.toString());
                        chai.expect(content.querySelector(".ImageLibrary button:last-child").getAttribute("data-id")).equal(library_results.Data[library_results.Data.length-1].id.toString());
                        done();
                        tested = true;
                    }
                  });
                
            });

            let btn = editor2.refToolbar.querySelector('button[aria-controls="dropdown-menu-image"]');
            btn.click();
            btn.parentElement.parentElement.querySelector('.se-button[data-command=library]').click();
            
        });
        it('library - custom el function', (done) => {
            editor2.refContent.innerHTML = "";
            editor2.setCfg("image.features", ["url","library"]);
            editor2.setCfg("image.library.per.page", 10);
            var library_results, tested = false;
            editor2.setCfg("image.library.fetch", (page, perpage, keyword, callback) => {
                fetch(url + "/library?page="+page+"&perpage="+perpage+"&keyword="+encodeURIComponent(keyword), {method: 'get',headers: {'Accept': 'application/json'}}).then((response) => {
                    return response.json();
                  }).then((output) => {
                    library_results = output;
                  }).catch((err) => { 
                    console.log(err);
                  }).finally(() => {
                    if(Object.keys(library_results).length) {
                        //has result for test, reformat it:
                        var data = [];
                        library_results.Data.forEach(d => {
                            data.push({name : d.author, thumb : d.download_url, url : d.download_url, type : "image/jpeg", 
                            elFunc : () => {
                                const _node = document.createElement("img");
                                _node.setAttribute("data-action", "library");
                                _node.setAttribute("src", d.download_url);
                                _node.setAttribute("data-id",d.id);
                                _node.setAttribute("style","max-width:100%");
                                return _node;
                            }});
                        });
                        callback(library_results.Pages.Total, data);
                    }
                    if(!tested){
                        const content = editor2.refToolbar.querySelector(".ImageLibrary").parentElement;
                        content.querySelector(".ImageLibrary button").click();
                        chai.expect(editor2.value()).equal('<img data-action="library" src="'+library_results.Data[0].download_url+'" data-id="'+library_results.Data[0].id+'" style="max-width:100%"><br>');
                        //make sure only run once
                        done();
                        tested = true;
                    }
                  });
                
            });

            let btn = editor2.refToolbar.querySelector('button[aria-controls="dropdown-menu-image"]');
            btn.click();
            btn.parentElement.parentElement.querySelector('.se-button[data-command=library]').click();
            
        });
        it('library - no pagination footer', (done) => {
            editor2.refContent.innerHTML = "";
            editor2.setCfg("image.features", ["url","library"]);
            editor2.setCfg("image.library.per.page", 10);
            editor2.setCfg("image.library.allow.paging", false);
            editor2.setCfg("image.library.allow.search", false);
            var library_results, tested = false;
            editor2.setCfg("image.library.fetch", (page, perpage, keyword, callback) => {
                fetch(url + "/library?page="+page+"&perpage="+perpage+"&keyword="+encodeURIComponent(keyword), {method: 'get',headers: {'Accept': 'application/json'}}).then((response) => {
                    return response.json();
                  }).then((output) => {
                    library_results = output;
                  }).catch((err) => { 
                    console.log(err);
                  }).finally(() => {
                    if(Object.keys(library_results).length) {
                        //has result for test, reformat it:
                        var data = [];
                        library_results.Data.forEach(d => {
                            data.push({name : d.author, thumb : d.download_url, url : d.download_url, type : "image/jpeg"});
                        });
                        callback(library_results.Pages.Total, data);
                    }
                    if(!tested){
                        const content = editor2.refToolbar.querySelector(".ImageLibrary").parentElement;
                        chai.expect(content.querySelector(".FileTileImageGridFooter")).equal(null);
                        //make sure only run once
                        done();
                        tested = true;
                    }
                  });
                
            });

            let btn = editor2.refToolbar.querySelector('button[aria-controls="dropdown-menu-image"]');
            btn.click();
            btn.parentElement.parentElement.querySelector('.se-button[data-command=library]').click();
        });
        it('library - no paging', (done) => {
            editor2.refContent.innerHTML = "";
            editor2.setCfg("image.features", ["url","library"]);
            editor2.setCfg("image.library.per.page", 10);
            editor2.setCfg("image.library.allow.paging", false);
            editor2.setCfg("image.library.allow.search", true);
            var library_results, tested = false;
            editor2.setCfg("image.library.fetch", (page, perpage, keyword, callback) => {
                fetch(url + "/library?page="+page+"&perpage="+perpage+"&keyword="+encodeURIComponent(keyword), {method: 'get',headers: {'Accept': 'application/json'}}).then((response) => {
                    return response.json();
                  }).then((output) => {
                    library_results = output;
                  }).catch((err) => { 
                    console.log(err);
                  }).finally(() => {
                    if(Object.keys(library_results).length) {
                        //has result for test, reformat it:
                        var data = [];
                        library_results.Data.forEach(d => {
                            data.push({name : d.author, thumb : d.download_url, url : d.download_url, type : "image/jpeg"});
                        });
                        callback(library_results.Pages.Total, data);
                    }
                    if(!tested){
                        const content = editor2.refToolbar.querySelector(".ImageLibrary").parentElement;
                        chai.expect(content.querySelector(".FileTileImageGridFooter")).not.equal(null);
                        chai.expect(content.querySelector(".FileTileImageGridFooter .current")).equal(null);
                        //make sure only run once
                        done();
                        tested = true;
                    }
                  });
                
            });

            let btn = editor2.refToolbar.querySelector('button[aria-controls="dropdown-menu-image"]');
            btn.click();
            btn.parentElement.parentElement.querySelector('.se-button[data-command=library]').click();
        });
        it('library - no search', (done) => {
            editor2.refContent.innerHTML = "";
            editor2.setCfg("image.features", ["url","upload","library"]);
            editor2.setCfg("image.library.per.page", 10);
            editor2.setCfg("image.library.allow.paging", true);
            editor2.setCfg("image.library.allow.search", false);
            var library_results, tested = false;
            editor2.setCfg("image.library.fetch", (page, perpage, keyword, callback) => {
                fetch(url + "/library?page="+page+"&perpage="+perpage+"&keyword="+encodeURIComponent(keyword), {method: 'get',headers: {'Accept': 'application/json'}}).then((response) => {
                    return response.json();
                  }).then((output) => {
                    library_results = output;
                  }).catch((err) => { 
                    console.log(err);
                  }).finally(() => {
                    if(Object.keys(library_results).length) {
                        //has result for test, reformat it:
                        var data = [];
                        library_results.Data.forEach(d => {
                            data.push({name : d.author, thumb : d.download_url, url : d.download_url, type : "image/jpeg"});
                        });
                        callback(library_results.Pages.Total, data);
                    }
                    if(!tested){
                        const content = editor2.refToolbar.querySelector(".ImageLibrary").parentElement;
                        chai.expect(content.querySelector(".FileTileImageGridFooter")).not.equal(null);
                        chai.expect(content.querySelector(".FileTileImageGridFooter .search")).equal(null);
                        //make sure only run once
                        done();
                        tested = true;
                    }
                  });
                
            });

            let btn = editor2.refToolbar.querySelector('button[aria-controls="dropdown-menu-image"]');
            btn.click();
            btn.parentElement.parentElement.querySelector('.se-button[data-command=library]').click();
        });
        it('library - search and paging', (done) => {
            editor2.refContent.innerHTML = "";
            editor2.setCfg("image.features", ["url","upload","library"]);
            editor2.setCfg("image.library.per.page", 10);
            editor2.setCache("image.library.current.page", 3);
            editor2.setCfg("image.library.allow.paging", true);
            editor2.setCfg("image.library.allow.search", true);
            var library_results, tested = false, pageList = [];
            editor2.setCfg("image.library.fetch", (page, perpage, keyword, callback) => {
                fetch(url + "/library?page="+page+"&perpage="+perpage+"&keyword="+encodeURIComponent(keyword), {method: 'get',headers: {'Accept': 'application/json'}}).then((response) => {
                    return response.json();
                  }).then((output) => {
                    library_results = output;
                  }).catch((err) => { 
                    console.log(err);
                  }).finally(() => {
                    pageList.push({page : page, keyword : keyword});
                    if(Object.keys(library_results).length) {
                        //has result for test, reformat it:
                        var data = [];
                        library_results.Data.forEach(d => {
                            data.push({name : d.author, thumb : d.download_url, url : d.download_url, type : "image/jpeg"});
                        });
                        callback(library_results.Pages.Total, data);
                    }
                    const content = editor2.refToolbar.querySelector(".FileTileImageGridFooter");
                    if(pageList.length === 1) {
                        //current page = 3, next: previous page = 2
                        content.querySelector(".previous").click();
                    } else if (pageList.length === 2) {
                        //current page = 2
                        chai.expect(page).equal(2);
                        //next: previous page = 1
                        content.querySelector(".previous").click();
                    } else if (pageList.length === 3) {
                        //current page = 1
                        chai.expect(page).equal(1);
                        //next: next page = 2
                        content.querySelector(".next").click();
                    } else if (pageList.length === 4) {
                        //current page = 2
                        chai.expect(page).equal(2);
                        //next: next page = 3
                        content.querySelector(".next").click();
                    }else if (pageList.length === 5) {
                        //current page = 3
                        chai.expect(page).equal(3);
                        //next: next page = 1, keyword = a
                        content.querySelector(".keyword").value = "a";
                        content.querySelector(".search").click();
                        
                    }else if (pageList.length === 6) {
                        //current page = 1, keyword = a
                        chai.expect(page).equal(1);
                        chai.expect(content.querySelector(".keyword").value).equal("a");
                        //next:
                        content.querySelector(".current").value = "4";
                        content.querySelector(".current").dispatchEvent(new Event("blur"));
                        
                    } else if (pageList.length === 7) {
                        //current page = 1, keyword = a
                        chai.expect(page).equal(4);
                        chai.expect(content.querySelector(".keyword").value).equal("a");
                        //next:
                        content.querySelector(".current").value = "2";
                        content.querySelector(".current").dispatchEvent(new KeyboardEvent("keydown", {
                            key: "Enter",
                            keyCode: 13, // example values.
                            code: "Enter", // put everything you need in this object.
                            which: 13,
                            shiftKey: false, // you don't need to include values
                            ctrlKey: false,  // if you aren't going to use them.
                            metaKey: false   // these are here for example's sake.
                        }));
                    }else if (pageList.length === 8) {
                        //current page = 1, keyword = a
                        chai.expect(page).equal(2);
                        chai.expect(content.querySelector(".keyword").value).equal("a");
                        if(!tested){
                            //make sure only run once
                            done();
                            tested = true;
                        }
                        
                    }
                    
                    
                  });
                
            });

            let btn = editor2.refToolbar.querySelector('button[aria-controls="dropdown-menu-image"]');
            btn.click();
            btn.parentElement.parentElement.querySelector('.se-button[data-command=library]').click();
            
        });

        it('upload calculate total size', (done) => {
            editor2.cachedList["image.upload.insert.list"] = [];
            editor2.refContent.innerHTML = "";
            editor2.setCfg("image.features", ["url", "upload"]);
            editor2.setCfg("image.url.rewrite.handler", (u) => { return u.replace('http://','//').replace('https://','//')});
            editor2.setCfg("image.upload.url", url);
            editor2.setCfg("image.upload.accept.files", 0);
            editor2.setCfg("image.upload.max.size", 0);//8 / 1048576
            editor2.setCfg("image.upload.max.size.per.file", 5 / 1048576);
            editor2.setCfg("image.upload.handler", (file, responseText, callback) => {
                var o = JSON.parse(responseText);
                callback(o.URL, o.Thumb, o);
            });
            editor2.setCfg("image.accept.types", "text/plain, image/jpeg, image/jpg, image/png, image/apng, image/gif, image/webp");
    
            var btn = editor2.refToolbar.querySelector('button[aria-controls="dropdown-menu-image"]');
            btn.click();
            editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content span[data-command='upload']").click();
            //should allow image link
            var file = new File(["1"], "1.txt", {
                type: "text/plain",
            }), file2 = new File(["12"], "2.txt", {
                type: "text/plain",
            });
            var dropEL = editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content .uploadcontainer");
            var evt = new Event('drop');
            evt.dataTransfer = {files : [file,file2,new File(["123"], "3.txt", {
                type: "text/plain",
            }),new File(["1234"], "4.png", {
                type: "image/png",
            }),new File(["12345"], "5.txt", {
                type: "text/plain",
            })]};
            dropEL.dispatchEvent(evt);
    
            var completed = () => {
                try{
                    chai.expect(editor2.getCallback("image.upload.total.size")).equal(1+2+3+4+5);
                    editor2.cachedList["image.upload.insert.list"][3].domEl.parentElement.removeChild(editor2.cachedList["image.upload.insert.list"][3].domEl);
                    chai.expect(editor2.getCallback("image.upload.total.size")).equal(1+2+3+5);
                    editor2.cachedList["image.upload.insert.list"][2].domEl.parentElement.removeChild(editor2.cachedList["image.upload.insert.list"][2].domEl);
                    
                    chai.expect(editor2.getCallback("image.upload.total.size")).equal(1+2+5);
                    editor2.setCfg("image.upload.max.size", 8 / 1048576);

                    editor2.refToolbar.querySelector('button[aria-controls="dropdown-menu-image"]').click();
                    editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content span[data-command='upload']").click();
                    //should allow image link
            
                    dropEL = editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content .uploadcontainer");
                    evt = new Event('drop');
                    evt.dataTransfer = {files : [new File(["bar"], "bar.txt", {
                        type: "text/plain",
                    })]};
                    dropEL.dispatchEvent(evt);
                    const txt = editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content .uploadcontainer strong");
                    chai.expect(txt.innerHTML).equal('<small>max allowed size of all files in total should be  0.00000762939453125MB. </small>');

                    editor2.setCfg("image.upload.max.size", 0);
                    editor2.setCfg("image.upload.max.size.per.file", 0);
                    editor2.cachedList["image.upload.insert.list"] = [];
                    editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content .se-button").click();
                    done();
                }catch(e) {console.log(e);}
                
                
            }
    
            var x = setInterval(() => {
                if(editor2.refToolbar.querySelectorAll(".FileTileImageGrid button.completed").length === 5 && editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content .FileTileImageGridFooter .insert").innerHTML === editor2.ln("insert")) {
                    editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content .FileTileImageGridFooter .insert").click();
                    clearInterval(x);
                    completed();
                }
            }, 200);
            
        });

        it('upload max files', (done) => {
            //continue from above:
            editor2.setCfg("image.upload.max.files", 3);

            var btn = editor2.refToolbar.querySelector('button[aria-controls="dropdown-menu-image"]');
            btn.click();
            editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content span[data-command='upload']").click();
            //should allow image link
            var file = new File(["1"], "1.txt", {
                type: "text/plain",
            }), file2 = new File(["12"], "2.txt", {
                type: "text/plain",
            });
            var dropEL = editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content .uploadcontainer");
            var evt = new Event('drop');
            evt.dataTransfer = {files : [file,file2,new File(["123"], "3.txt", {
                type: "text/plain",
            }),new File(["1234"], "4.png", {
                type: "image/png",
            }),new File(["12345"], "5.txt", {
                type: "text/plain",
            })]};
            dropEL.dispatchEvent(evt);
            const txt = editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content .uploadcontainer strong");
            chai.expect(txt.innerHTML).equal('<small>Cannot upload more than 3 files. </small>');
            editor2.setCfg("image.upload.max.size", 0);
            editor2.setCfg("image.upload.max.size.per.file", 0);
            editor2.setCfg("image.upload.max.files", 0);
            editor2.cachedList["image.upload.insert.list"] = [];
            editor2.refToolbar.querySelector("#dropdown-menu-image .se-dropdown-content .se-button").click();
            done();

            
        });
        it('should allow dropping files to content', (done) => {
            editor2.changeValue("");
            editor2.cachedList["image.upload.insert.list"] = [];
            destroyEditor2();
            initEditor2({cfgList : {
                "image.features" : ["url", "upload"],
                "image.upload.url" : url,
                "image.drop.to.content.upload" : true,
                "image.upload.accept.files" : 0,
                "image.accept.types" : "text/plain, image/jpeg, image/jpg, image/png, image/apng, image/gif, image/webp",
                "image.upload.handler" : (file, responseText, callback) => {
                    var o = JSON.parse(responseText);
                    callback(o.URL, o.Thumb, o);
                }
            }})
            
    
            //should allow image link
            var file = new File(["foo"], "foox.txt", {
                type: "text/plain",
            }), file2 = new File([dataURItoBlob(pngA)], "a.png", {
                type: "image/png",
            });
            var evt = new Event('drop');
            evt.dataTransfer = {files : [file,file2]};
            editor2.refContent.dispatchEvent(evt);
    
            var completed = () => {
                chai.expect(editor2.cachedList["image.upload.insert.list"][0].name).equal('foox.txt');
                chai.expect(editor2.cachedList["image.upload.insert.list"][1].name).equal('a.png');
                const val = editor2.value();
                
                chai.expect(val).to.include('<a data-action="upload" href="'+editor2.cachedList["image.upload.insert.list"][0].url+'" target="_blank">foox.txt</a>');
                chai.expect(val).to.include('<img data-action="upload" src="'+editor2.cachedList["image.upload.insert.list"][1].url+'" style="max-width:100%">');
                done();
            }
    
            var x = setInterval(() => {
                if(editor2.cachedList["image.upload.insert.list"].length === 2) {
                    clearInterval(x);
                    try{completed();}catch(e){console.log(e);}
                    
                }
            }, 200);
                
        });
        it('should reject dropping file type to content', (done) => {
            editor2.changeValue("");
            editor2.cachedList["image.upload.insert.list"] = [];
            destroyEditor2();
            initEditor2({cfgList : {
                "image.features" : ["url", "upload"],
                "image.upload.url" : url,
                "image.drop.to.content.upload" : true,
                "image.upload.accept.files" : 0,
                "image.accept.types" : "text/plain, image/jpeg, image/jpg, image/png, image/apng, image/gif, image/webp",
                "image.upload.handler" : (file, responseText, callback) => {
                    var o = JSON.parse(responseText);
                    callback(o.URL, o.Thumb, o);
                }
            }})
            
    
            //should allow image link
            var file = new File(["foo"], "foox.pdf", {
                type: "application/pdf",
            }), file2 = new File([dataURItoBlob(pngA)], "a.png", {
                type: "image/png",
            });
            var evt = new Event('drop');
            evt.dataTransfer = {files : [file,file2]};
            editor2.refContent.dispatchEvent(evt);
            chai.expect(editor2.refContent.parentElement.querySelector(".UploadProgressError").innerHTML).to.equal('please select the appropriate file types: text/plain, image/jpeg, image/jpg, image/png, image/apng, image/gif, image/webp. <br>');
            done();
                
        });
        it('should limit dropping number of files to content', (done) => {
            editor2.changeValue("");
            editor2.cachedList["image.upload.insert.list"] = [];
            destroyEditor2();
            initEditor2({cfgList : {
                "image.features" : ["url", "upload"],
                "image.upload.url" : url,
                "image.drop.to.content.upload" : true,
                "image.upload.accept.files" : 1,
                "image.accept.types" : "text/plain, image/jpeg, image/jpg, image/png, image/apng, image/gif, image/webp",
                "image.upload.handler" : (file, responseText, callback) => {
                    var o = JSON.parse(responseText);
                    callback(o.URL, o.Thumb, o);
                }
            }})
            
    
            //should allow image link
            var file = new File(["foo"], "foox.txt", {
                type: "text/plain",
            }), file2 = new File([dataURItoBlob(pngA)], "a.png", {
                type: "image/png",
            });
            var evt = new Event('drop');
            evt.dataTransfer = {files : [file,file2]};
            editor2.refContent.dispatchEvent(evt);
            chai.expect(editor2.refContent.parentElement.querySelector(".UploadProgressError").innerHTML).to.equal('Cannot upload more than 1 files. <br>');
            done();
                
        });
        it('should limit dropping max files to content', (done) => {
            editor2.changeValue("");
            editor2.cachedList["image.upload.insert.list"] = [];
            destroyEditor2();
            initEditor2({cfgList : {
                "image.features" : ["url", "upload"],
                "image.upload.url" : url,
                "image.drop.to.content.upload" : true,
                "image.upload.max.files" : 2,
                "image.accept.types" : "text/plain, image/jpeg, image/jpg, image/png, image/apng, image/gif, image/webp",
                "image.upload.handler" : (file, responseText, callback) => {
                    var o = JSON.parse(responseText);
                    callback(o.URL, o.Thumb, o);
                }
            }})
            
    
            //should allow image link
            var file = new File(["foo"], "foox.txt", {
                type: "text/plain",
            }), file2 = new File([dataURItoBlob(pngA)], "a.png", {
                type: "image/png",
            });
            var evt = new Event('drop');
            evt.dataTransfer = {files : [file,file2]};
            editor2.refContent.dispatchEvent(evt);
    
            var completed = () => {
                chai.expect(editor2.cachedList["image.upload.insert.list"][0].name).equal('foox.txt');
                chai.expect(editor2.cachedList["image.upload.insert.list"][1].name).equal('a.png');
                //drop again should failed
                evt = new Event('drop');
                evt.dataTransfer = {files : [file,file2]};
                editor2.refContent.dispatchEvent(evt);
                chai.expect(editor2.refContent.parentElement.querySelector(".UploadProgressError").innerHTML).to.equal('Cannot upload more than 2 files. <br>');
                done();
            }
    
            var x = setInterval(() => {
                if(editor2.cachedList["image.upload.insert.list"].length === 2) {
                    clearInterval(x);
                    try{completed();}catch(e){console.log(e);}
                    
                }
            }, 200);
                
        });

        it('should limit dropping exceeding upload size per file to content', (done) => {
            editor2.changeValue("");
            editor2.cachedList["image.upload.insert.list"] = [];
            destroyEditor2();
            initEditor2({cfgList : {
                "image.features" : ["url", "upload"],
                "image.upload.url" : url,
                "image.drop.to.content.upload" : true,
                "image.upload.accept.files" : 0,
                "image.upload.max.size" : 0,//10 / 1048576,
                "image.upload.max.size.per.file" : 5 / 1048576,
                "image.accept.types" : "text/plain, image/jpeg, image/jpg, image/png, image/apng, image/gif, image/webp",
                "image.upload.handler" : (file, responseText, callback) => {
                    var o = JSON.parse(responseText);
                    callback(o.URL, o.Thumb, o);
                }
            }})
            
    
            //should allow image link
            var file = new File(["foo"], "foox.txt", {
                type: "text/plain",
            }), file2 = new File([dataURItoBlob(pngA)], "a.png", {
                type: "image/png",
            });
            var evt = new Event('drop');
            evt.dataTransfer = {files : [file,file2]};
            editor2.refContent.dispatchEvent(evt);
            chai.expect(editor2.refContent.parentElement.querySelector(".UploadProgressError").innerHTML).to.equal('max allowed size per file should be  0.00000476837158203125MB. <br>');
            done();

        });
        it('should limit dropping exceeding total upload file size to content', (done) => {
            editor2.changeValue("");
            editor2.cachedList["image.upload.insert.list"] = [];
            destroyEditor2();
            initEditor2({cfgList : {
                "image.features" : ["url", "upload"],
                "image.upload.url" : url,
                "image.drop.to.content.upload" : true,
                "image.upload.accept.files" : 0,
                "image.upload.max.size" : 10 / 1048576,
                "image.upload.max.size.per.file" : 0,
                "image.accept.types" : "text/plain, image/jpeg, image/jpg, image/png, image/apng, image/gif, image/webp",
                "image.upload.handler" : (file, responseText, callback) => {
                    var o = JSON.parse(responseText);
                    callback(o.URL, o.Thumb, o);
                }
            }})
            

            var file = new File(["foo"], "foox.txt", {
                type: "text/plain",
            }), file2 = new File([dataURItoBlob(pngA)], "a.png", {
                type: "image/png",
            });
            var evt = new Event('drop');
            evt.dataTransfer = {files : [file,file2]};
            editor2.refContent.dispatchEvent(evt);
            chai.expect(editor2.refContent.parentElement.querySelector(".UploadProgressError").innerHTML).to.equal('max allowed size of all files in total should be  0.0000095367431640625MB.  <br>');
            done();

        });
        it('should allow custom el function when dropping files to content', (done) => {
            editor2.changeValue("");
            editor2.cachedList["image.upload.insert.list"] = [];
            destroyEditor2();
            initEditor2({cfgList : {
                "image.features" : ["url", "upload"],
                "image.upload.url" : url,
                "image.drop.to.content.upload" : true,
                "image.upload.accept.files" : 0,
                "image.accept.types" : "text/plain, image/jpeg, image/jpg, image/png, image/apng, image/gif, image/webp",
                "image.upload.handler" : (file, responseText, callback) => {
                    var o = JSON.parse(responseText);
                    callback(o.URL, o.Thumb, o, () => {
                        if(o.Type.indexOf("image/") !== -1) {
                            const _node = document.createElement("img");
                            _node.setAttribute("data-action", "upload");
                            _node.setAttribute("src", o.URL);
                            _node.setAttribute("style","max-width:100%");
                            _node.setAttribute("data-test", "1");
                            return _node;
                        } else {
                            const _node = document.createElement("a");
                            _node.setAttribute("data-action", "upload");
                            _node.setAttribute("href", o.URL);
                            _node.setAttribute("target","_blank");
                            _node.setAttribute("data-test", "1");
                            _node.innerHTML = "foox.txt";
                            return _node;
                        }
                    });
                }
            }})
            
    
            //should allow image link
            var file = new File(["foo"], "foox.txt", {
                type: "text/plain",
            }), file2 = new File([dataURItoBlob(pngA)], "a.png", {
                type: "image/png",
            });
            var evt = new Event('drop');
            evt.dataTransfer = {files : [file,file2]};
            editor2.refContent.dispatchEvent(evt);
    
            var completed = () => {
                chai.expect(editor2.cachedList["image.upload.insert.list"][0].name).equal('foox.txt');
                chai.expect(editor2.cachedList["image.upload.insert.list"][1].name).equal('a.png');
                const val = editor2.value();
                chai.expect(val).to.include('<a data-action="upload" href="'+editor2.cachedList["image.upload.insert.list"][0].url+'" target="_blank" data-test="1">foox.txt</a>');
                chai.expect(val).to.include('<img data-action="upload" src="'+editor2.cachedList["image.upload.insert.list"][1].url+'" style="max-width:100%" data-test="1">');
                done();
            }
    
            var x = setInterval(() => {
                if(editor2.cachedList["image.upload.insert.list"].length === 2) {
                    clearInterval(x);
                    try{completed();}catch(e){console.log(e);}
                    
                }
            }, 200);
                
        });
        it('should allow url rewrite when dropping files to content', (done) => {
            editor2.changeValue("");
            editor2.cachedList["image.upload.insert.list"] = [];
            destroyEditor2();
            initEditor2({cfgList : {
                "image.features" : ["url", "upload"],
                "image.upload.url" : url,
                "image.drop.to.content.upload" : true,
                "image.upload.accept.files" : 0,
                "image.url.rewrite.handler" : (u) => { return u.replace('http://','//').replace('https://','//')},
                "image.accept.types" : "text/plain, image/jpeg, image/jpg, image/png, image/apng, image/gif, image/webp",
                "image.upload.handler" : (file, responseText, callback) => {
                    var o = JSON.parse(responseText);
                    callback(o.URL, o.Thumb, o);
                }
            }})
            
    
            //should allow image link
            var file = new File(["foo"], "foox.txt", {
                type: "text/plain",
            }), file2 = new File([dataURItoBlob(pngA)], "a.png", {
                type: "image/png",
            });
            var evt = new Event('drop');
            evt.dataTransfer = {files : [file,file2]};
            editor2.refContent.dispatchEvent(evt);
    
            var completed = () => {

                chai.expect(editor2.cachedList["image.upload.insert.list"][0].url.indexOf("//")).equal(0);
                chai.expect(editor2.cachedList["image.upload.insert.list"][1].url.indexOf("//")).equal(0);
                done();
            }
    
            var x = setInterval(() => {
                if(editor2.cachedList["image.upload.insert.list"].length === 2) {
                    clearInterval(x);
                    try{completed();}catch(e){console.log(e);}
                    
                }
            }, 200);
                
        });

    });

}


